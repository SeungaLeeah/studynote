[StudentMapper]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="StudentMapper">

    <delete id="deleteItemByProfno">
        DELETE FROM student WHERE profno=#{profno};
    </delete>

</mapper>

=============================================

[ProfessorMapper]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProfessorMapper">
    <!-- 한명의 교수 조회 (단일행) -->
    <select id="selectItem">
        SELECT profno, name, userid, position, sal, hiredate, comm, deptno FROM professor WHERE profno=#{profno}
    </select>

    <!-- 교수목록 조회 - 키워드: 교수이름, 페이지번호 -->
    <select id="selectList">
        SELECT profno, name, userid, position, sal, hiredate, comm, deptno FROM professor

        <where>
            <if test="name != null and name != ''">
                name LIKE concat('%', #{name}, '%')
            </if>
        </where>

        ORDER BY profno DESC

        <!-- 페이지 번호 -->
        <if test="listCount > 0">
            LIMIT ${offset}, ${listCount}
        </if>
    </select>

    <!-- 데이터 수 조회하기 -->
    <select id="selectCountAll">
        SELECT COUNT(*) AS cnt FROM professor

        <where>
            <if test="name != null and name != ''">
                name LIKE concat('%', #{name}, '%')
            </if>
        </where>
    </select>


    <!-- 교수데이터 생성 -->
    <insert id="insertItem">
        INSERT INTO professor (name, userid, position, sal, hiredate, comm, deptno) VALUES (#{name}, #{userid}, #{position}, #{sal}, #{hiredate}, #{comm}, #{deptno});
    </insert>


    <!-- 교수 데이터 수정 -->
    <update id="updateItem">
        UPDATE professor SET name=#{name}, userid=#{userid}, position=#{position}, sal=#{sal}, hiredate=#{hiredate}, comm=#{comm}, deptno=#{deptno}
        WHERE profno=#{profno};
    </update>


    <!-- 교수 삭제 - 담당학생이 있을 경우 해당 학생의 담당교수를 배정되지 않은 상태로 갱신 후 교수 삭제 -->
    <delete id="deleteItem">
        DELETE FROM professor WHERE profno=#{profno};
    </delete>

</mapper>

=================================================

[ProfessorController]
import express from 'express';
import logger from '../helper/LogHelper.js';
import regexHelper from '../helper/RegexHelper.js';
import { pagenation } from '../helper/UtilHelper.js';
import BadRequestException from '../exceptions/BadRequestException.js';
import professorService from '../services/ProfessorService.js';

const ProfessorController = () => {
    const url = "/professor";
    const router = express.Router();

    /** 전체 목록 조회 --> Read(SELECT) */
    router.get(url, async (req, res, next) => {
        // 검색 파라미터
        const query = req.get('query');

        // 페이지 번호 파라미터 (기본값은 1)
        const page = req.get('page', 1);
        // 한 페이지에 보여질 목록 수 받기 (기본값은 10)
        const rows = req.get('rows', 10);

        const params = {};
        if(query){
            params.name = query;
        }

        // 데이터 조회
        let json = null;
        let pageInfo = null;

        try {
            // 전체 데이터 수 얻기
            const totalCount = await professorService.getCount(params);
            pageInfo = pagenation(totalCount, page, rows);

            params.offset = pageInfo.offset;
            params.listCount = pageInfo.listCount;
            json = await professorService.getList(params);
        } catch (err) {
            return next(err);
        }

        res.sendResult({pagenation: pageInfo, item: json});
    });

    /** 단일행 조회 --> Read(SELECT) */
    router.get(`${url}/:profno`, async (req, res, next) => {
        // 파라미터 받기
        const profno = req.get('profno');

        // 파라미터 유효성검사
        try {
            regexHelper.value(profno, '교수번호가 없습니다.');
            regexHelper.num(profno, '교수번호가 잘못되었습니다.');
        } catch (err) {
            return next(err);
        }

        // 데이터 조회
        let json = null;

        try{
            json = await professorService.getItem({
                profno: profno
            });
        }catch (err) {
            return next(err);
        }
        res.sendResult({item: json});
    });


    /** 데이터 추가 --> CREATE(INSERT) */
    router.post(url, async (req, res, next) => {
        // 파라미터 받기
        const name = req.post('name');
        const userid = req.post('userid');
        const position = req.post('position');
        const sal = req.post('sal');
        const hiredate = req.post('hiredate');
        const comm = req.post('comm');
        const deptno = req.post('deptno');

        // 파라미터 유효성검사
        try {
            regexHelper.value(name, '교수 이름이 없습니다.');
            regexHelper.value(userid, '교수 아이디가 없습니다.');
            regexHelper.value(position, '교수 직급이 없습니다.');
            regexHelper.value(sal, '교수 급여가 없습니다.');
            regexHelper.value(hiredate, '교수 입사일이 없습니다.');
            regexHelper.value(comm, '교수 보직수당 없습니다.');
            regexHelper.value(deptno, '부서번호가 없습니다.');
        } catch (err) {
            return next(err);
        }

        // 데이터 조회
        let json = null;

        try{
            json = await professorService.addItem({
                name: name,
                userid: userid,
                position: position,
                sal: sal,
                hiredate: hiredate,
                comm: comm,
                deptno: deptno
            });
        }catch (err) {
            return next(err);
        }
        res.sendResult({item: json});
    });



    /** 데이터 수정 --> Update(update) */
    router.put(`${url}/:profno`, async (req, res, next) => {
        // 파라미터 받기
        const profno = req.get('profno');
        const name = req.put('name');
        const userid = req.put('userid');
        const position = req.put('position');
        const sal = req.put('sal');
        const hiredate = req.put('hiredate');
        const comm = req.put('comm');
        const deptno = req.put('deptno');

        // 파라미터 유효성검사
        try {
            regexHelper.value(profno, '교수번호가 없습니다.');
            regexHelper.num(profno, '교수번호가 잘못되었습니다.');
            regexHelper.value(name, '교수 이름이 없습니다.');
            regexHelper.value(userid, '교수 아이디가 없습니다.');
            regexHelper.value(position, '교수 직급이 없습니다.');
            regexHelper.value(sal, '교수 급여가 없습니다.');
            regexHelper.value(hiredate, '교수 입사일이 없습니다.');
            regexHelper.value(comm, '교수 보직수당 없습니다.');
            regexHelper.value(deptno, '부서번호가 없습니다.');
        } catch (err) {
            return next(err);
        }

        // 데이터 조회
        let json = null;

        try{
            json = await professorService.editItem({
                profno: profno,
                name: name,
                userid: userid,
                position: position,
                sal: sal,
                hiredate: hiredate,
                comm: comm,
                deptno: deptno
            });
        }catch (err) {
            return next(err);
        }
        res.sendResult({item: json});
    });



    /** 데이터 삭제 --> Delete(DELETE) */
    router.delete(`${url}/:profno`, async (req, res, next) => {
        // 파라미터 받기
        const profno = req.get('profno');

        // 파라미터 유효성검사
        try {
            regexHelper.value(profno, '교수번호가 없습니다.');
            regexHelper.num(profno, '교수번호가 잘못되었습니다.');
        } catch (err) {
            return next(err);
        }

        // 데이터 조회
        let json = null;

        try{
            json = await professorService.deleteItem({
                profno: profno
            });
        }catch (err) {
            return next(err);
        }
        res.sendResult({item: json});
    });


    return router;
};

export default ProfessorController;

=========================================

[ProfessorService]
import mybatisMapper from 'mybatis-mapper';
import DBPool from '../helper/DBPool.js';
import RuntimeException from '../exceptions/RuntimeException.js';

class ProfessorService {

    /** 생성자 - Mapper파일을 로드한다 */
    constructor() {
        mybatisMapper.createMapper([
            './mappers/ProfessorMapper.xml',
            './mappers/StudentMapper.xml'
        ]);
    }
  
    /** 목록 데이터를 조회한다 */
    async getList(params) {
        let dbcon = null;
        let data = null;

        try {
            dbcon = await DBPool.getConnection();

            let sql = mybatisMapper.getStatement('ProfessorMapper','selectList', params);
            let [result] = await dbcon.query(sql);

            if(result.length === 0){
                throw new RuntimeException('조회된 데이터가 없습니다.');
            }
            data = result;
        } catch (err) {
            throw err;
        } finally {
            if (dbcon) { dbcon.release(); }
        }
        return data;
    }

    /** 단일 데이터를 조회한다 */
    async getItem(params) {
        let dbcon = null;
        let data = null;

        try {
            dbcon = await DBPool.getConnection();

            let sql = mybatisMapper.getStatement('ProfessorMapper','selectItem', params);
            let [result] = await dbcon.query(sql);

            if(result.length === 0){
                throw new RuntimeException('조회된 데이터가 없습니다.');
            }
            data = result;
        } catch (err) {
            throw err;
        } finally {
            if (dbcon) { dbcon.release(); }
        }
        return data;
    }

    /** 데이터를 추가하고 추가된 결과를 조회하여 리턴한다. */
    async addItem(params) {
        let dbcon = null;
        let data = null;
        try {
            dbcon = await DBPool.getConnection();

            let sql = mybatisMapper.getStatement('ProfessorMapper','insertItem', params);
            let [{insertId, affectedRows}] = await dbcon.query(sql);

            if(affectedRows === 0){
                throw new RuntimeException('조회된 데이터가 없습니다.');
            }


            sql = mybatisMapper.getStatement('ProfessorMapper', 'selectItem', {profno: insertId});
            let [result] = await dbcon.query(sql);

            if(result.length === 0){
                throw new RuntimeException('저장된 데이터를 조회할 수 없습니다.');
            }
            data = result[0];
        } catch (err) {
            throw err;
        } finally {
            if (dbcon) { dbcon.release(); }
        }
        return data;
    }

    /** 데이터를 수정하고 수정된 결과를 조회하여 리턴한다. */
    async editItem(params) {
        let dbcon = null;
        let data = null;

        try {
            dbcon = await DBPool.getConnection();

            let sql = mybatisMapper.getStatement('ProfessorMapper', 'updateItem', params);
            let [{affectedRows}] = await dbcon.query(sql);

            if (affectedRows === 0) {
                throw new RuntimeException('저장된 데이터가 없습니다.');
            }


            sql = mybatisMapper.getStatement('ProfessorMapper', 'selectItem', {profno: params.profno});
            let [result] = await dbcon.query(sql);

            if(result.length === 0){
                throw new RuntimeException('저장된 데이터를 조회할 수 없습니다.');
            }

            data = result[0];
        } catch (err) {
            throw err;
        } finally {
            if (dbcon) { dbcon.release(); }
        }
            return data;
    }

    /** 데이터를 삭제한다. */
    async deleteItem(params) {
        let dbcon = null;

        try {
            dbcon = await DBPool.getConnection();

            let sql = mybatisMapper.getStatement('StudentMapper', 'deleteItemByProfno', params);
            let [{affectedRows}] = await dbcon.query(sql);

            sql = mybatisMapper.getStatement('ProfessorMapper', 'deleteItem', params);
            [{affectedRows}] = await dbcon.query(sql);

            if(affectedRows === 0){
                throw new RuntimeException('삭제된 데이터가 없습니다.');
            }
        } catch (err) {
            throw err;
        } finally {
            if (dbcon) { dbcon.release(); }
        }
    }

    /** 전체 데이터 수 조회 */
    async getCount(params){
        let dbcon = null;
        let cnt = 0;

        try{
            dbcon = await DBPool.getConnection();

            let sql = mybatisMapper.getStatement('ProfessorMapper', 'selectCountAll', params);
            let [result] = await dbcon.query(sql);

            if(result.length > 0){
                cnt = result[0].cnt;
            }
        }catch (err) {
            throw err;
        }finally{
            if(dbcon) {dbcon.release();}
        }
        return cnt;
    }
}
export default new ProfessorService();
